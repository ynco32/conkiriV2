version: "3.8"

services:
  backend:
    container_name: backend-master
    build: ./backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - KAKAO_REDIRECT_URL=${KAKAO_REDIRECT_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DB_URL=jdbc:mysql://mysql-master:3306/conkiri
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
      - SERVER_DOMAIN=${SERVER_DOMAIN}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - REDIS_HOST=${REDIS_HOST}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    container_name: frontend-master
    build:
      context: ./frontend
      args:
        - NEXT_PUBLIC_KAKAO_MAP_API_KEY=${NEXT_PUBLIC_KAKAO_MAP_API_KEY}
        - NEXT_PUBLIC_API_URL=https://conkiri.com
        - NEXT_PUBLIC_SKT_API_KEY=${NEXT_PUBLIC_SKT_API_KEY}
        - NEXT_PUBLIC_SKT_API_URL=${NEXT_PUBLIC_SKT_API_URL}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - app-network

  mysql:
    container_name: mysql-master
    image: mysql:8.0.36
    healthcheck:
      test:
        [
          "CMD",
          "mysql",
          "--user=${MYSQL_USER}",
          "--password=${MYSQL_PASSWORD}",
          "-e",
          "SELECT 1",
        ]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 10s
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=conkiri
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=Asia/Seoul
    ports:
      - "13306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

  redis:
    container_name: redis-master
    image: redis:latest
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "no", "--replicaof", "no", "one"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 10s
    networks:
      - app-network

volumes:
  mysql_data:

networks:
  app-network:
    external: true
