version: '3.8'           # docker-compose 버전

services:
  nginx:
    build: ./nginx # Dockerfile 위치
    ports:
      - "80:80"    # HTTP 포트
      - "443:443"  # HTTPS 포트 추가
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot   # 인증 확인용 볼륨
    depends_on:
      - frontend
      - backend
    command: /bin/sh -c "nginx -g 'daemon off;' && nginx -s reload" # nginx 설정 재로드, 컨테이너 시작 시 자동으로 하도록

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    command: certonly --standalone -d conkiri.com

  backend:
    build: ./backend     # backend Dockerfile 위치
    ports:
      - "8080:8080"      # 외부:내부 포트
    environment:         # 환경변수 설정
      - SPRING_PROFILES_ACTIVE=dev
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - KAKAO_REDIRECT_URL=${KAKAO_REDIRECT_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DB_URL=${DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
      - SERVER_DOMAIN=${SERVER_DOMAIN}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - REDIS_HOST=${REDIS_HOST}
    depends_on:          # 의존성 설정
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      args:
        - NEXT_PUBLIC_KAKAO_MAP_API_KEY=${NEXT_PUBLIC_KAKAO_MAP_API_KEY}
        - NEXT_PUBLIC_API_URL=https://conkiri.com
        - NEXT_PUBLIC_SKT_API_KEY=${NEXT_PUBLIC_SKT_API_KEY}
        - NEXT_PUBLIC_SKT_API_URL=${NEXT_PUBLIC_SKT_API_URL}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend

  mysql:
    image: mysql:8.0.36     # MySQL 이미지
    healthcheck:
      test: ["CMD", "mysql", "--user=${MYSQL_USER}", "--password=${MYSQL_PASSWORD}", "-e", "SELECT 1"]
      interval: 5s    # 5초마다 체크
      timeout: 3s     # 체크 타임아웃 3초
      retries: 2      # 2번 재시도
      start_period: 10s  # 초기 시작 대기 시간 10초
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=conkiri
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=Asia/Seoul
    ports:
      - "13306:3306"
    volumes:            # 데이터 영속성
      - mysql_data:/var/lib/mysql

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 10s
volumes:
  mysql_data:          # MySQL 데이터 저장용 볼륨
